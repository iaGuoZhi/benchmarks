cmake_minimum_required(VERSION 3.15)

function(add_split_configured_source target scope file_name include variables values gen_lines counter)
    set(ctr ${${counter}})
    if (variables)
        list(POP_FRONT variables var_name value_idx_begin value_idx_end)
        math(EXPR n_values "${value_idx_end} - ${value_idx_begin}" )
        list(SUBLIST values "${value_idx_begin}" "${n_values}" var_values)
        foreach (val ${var_values})
            set(next_defines "${gen_lines}")
            list(APPEND next_defines "#define ${var_name} ${val}")
            add_split_configured_source("${target}" "${scope}" "${file_name}" "${include}" "${variables}"
                    "${values}" "${next_defines}" ctr)
        endforeach ()
    else ()
        math(EXPR ctr "${ctr} + 1")
        get_filename_component(file_dir "${file_name}" DIRECTORY)
        get_filename_component(file_basename "${file_name}" NAME_WE)
        get_filename_component(file_ext "${file_name}" EXT)
        list(APPEND gen_lines "#define SPLIT_CONFIGURATION_${file_basename}")
        list(APPEND gen_lines "#include \"${CMAKE_CURRENT_SOURCE_DIR}/${include}\"" "")
        list(JOIN gen_lines "\n" gen_content)
        set(gen_name "${CMAKE_CURRENT_BINARY_DIR}/SplitConfiguration/${target}/${file_dir}/${file_basename}-${ctr}${file_ext}")
        file(GENERATE OUTPUT "${gen_name}" CONTENT "${gen_content}")
        target_sources("${target}" "${scope}" "${gen_name}")
    endif ()
    set(${counter} ${ctr} PARENT_SCOPE)
endfunction()

function(target_split_configured_sources target scope)
    set(state "KEY_GENERATE")
    foreach(arg ${ARGN})
        if (state STREQUAL "KEY_GENERATE")
            if (arg STREQUAL "GENERATE")
                set(state "GEN_FILE_NAME")
            elseif (arg STREQUAL "VARIABLE")
                set(state "VAR_NAME")
                list(LENGTH values first_value_idx)
            else ()
                message(FATAL_ERROR "Expected GENERATE or VARIABLE, got ${arg}")
            endif ()
        elseif (state STREQUAL "GEN_FILE_NAME")
            set(state "KEY_FROM")
            list(APPEND file_names "${arg}")
        elseif (state STREQUAL "KEY_FROM")
            if (arg STREQUAL "FROM")
                set(state "FROM_FILE_NAME")
            else ()
                message(FATAL_ERROR "Expected FROM, got ${arg}")
            endif ()
        elseif (state STREQUAL "FROM_FILE_NAME")
            set(state "KEY_GENERATE")
            list(APPEND file_names "${arg}")
        elseif (state STREQUAL "VAR_NAME")
            set(var_name "${arg}")
            set(state "KEY_VALUES")
        elseif (state STREQUAL "KEY_VALUES")
            if (arg STREQUAL "VALUES")
                set(state "VALUES")
            else ()
                message(FATAL_ERROR "Expected VALUES, got ${arg}")
            endif ()
        elseif (state STREQUAL "VALUES")
            if (arg STREQUAL "VARIABLE")
                list(LENGTH values next_value_idx)
                list(APPEND variables "${var_name}" "${first_value_idx}" "${next_value_idx}")
                set(state "VAR_NAME")
                set(first_value_idx "${next_value_idx}")
            else ()
                list(APPEND values "${arg}")
            endif ()
        else ()
            message(FATAL_ERROR "Invalid state ${state}, got ${arg}")
        endif ()
    endforeach()
    if (state STREQUAL "VALUES")
        list(LENGTH values next_value_idx)
        list(APPEND variables "${var_name}" "${first_value_idx}" "${next_value_idx}")
    elseif (NOT state STREQUAL "KEY_GENERATE")
        message(FATAL_ERROR "Unexpected end of arguments")
    endif ()

    while (NOT "x${file_names}" STREQUAL "x")
        list(POP_FRONT file_names file_name include)
        set(ctr 0)
        add_split_configured_source("${target}" "${scope}" "${file_name}" "${include}"
                "${variables}" "${values}" "" ctr)
    endwhile ()
endfunction()
